#!{{ .bash }}
# @file dytoy_binary
# @brief Install binary tools from GitHub or GitLab releases
. {{ .chezmoi.sourceDir }}/../scripts/lib/dybatpho/init.sh
. {{ .chezmoi.sourceDir }}/../scripts/lib/dytoy_yaml.sh
. {{ .chezmoi.sourceDir }}/../scripts/lib/compressed.sh
. {{ .chezmoi.sourceDir }}/../scripts/lib/binary_download.sh
. {{ .chezmoi.sourceDir }}/../scripts/lib/misc.sh
dybatpho::register_err_handler

#######################################
# @description Spec of dytoy_binary
#######################################
function _spec_main {
  dybatpho::opts::setup "Utilities to install binary tools" MAIN_ARGS action:"_main"
  dybatpho::opts::param "Log level" LOG_LEVEL --log-level -l init:="info" validate:"dybatpho::validate_log_level \$OPTARG"
  dybatpho::opts::flag "Dry run" DRY_RUN --dry-run -D on:true off:false init:="false"
  dybatpho::opts::param "Specific tool" TOOL --tool -t init:="@empty"
  dybatpho::opts::flag "Install only essential tool" ONLY_ESSENTIAL --essential -e on:true off:false init:="false"
  dybatpho::opts::flag "Install only not installed tool" ONLY_NOT_INSTALLED --check-installed --no-check-installed -i on:true off:false init:="true"
  dybatpho::opts::flag "List files in compressed instead of extract" LIST_CONTENTS --list -L on:true off:false init:="false"
  dybatpho::opts::disp "Show help" --help -h action:"dybatpho::generate_help _spec_main"
}

#######################################
# @description Parse config file and update tool
# by get from Github/Gitlab release file
# @arg $1 string Name of tool
# @arg $2 string "github" or "gitlab"
#######################################
function _parse_release {
  local name type
  dybatpho::expect_args name type -- "$@"
  location=$(dytoy::get_yaml "$name" "location")
  if [ "$location" = "null" ]; then
    location=$HOME/.local/bin
  fi
  dytoy::is_installed_command "$name" "$location" && return
  dybatpho::debug "Download tool ${name} to ${location}"

  dybatpho::progress "Installing ${name}"
  dybatpho::dry_run mkdir -p "$location"
  host=$(dytoy::get_yaml "$name" "${type}.host")
  if [ "$host" = "null" ]; then
    host="${type}.com"
  fi
  dybatpho::debug "Host is ${host}"
  repo=$(dytoy::get_yaml "$name" "${type}.repo")
  version=$(dytoy::get_yaml "$name" "${type}.version")
  release_asset=$(dytoy::get_yaml "$name" "${type}.release_asset")

  if [ "$version" = "latest" ] || [ "$version" = "null" ]; then
    version=$(binary::get_latest_version "$host" "$repo")
    if [ "$version" = "" ]; then
      dybatpho::die "You're limited request to ${type} API"
    fi
  else
    dybatpho::info "Using version ${version} for https://${host}/${repo}"
  fi
  release_asset=$(echo "${release_asset}" | misc::replace_version "$version")
  dybatpho::debug "Release asset is ${release_asset}"

  local url
  if [ "$type" = "github" ]; then
    url="https://${host}/${repo}/releases/download/${version}/${release_asset}"
  elif [ "$type" = "gitlab" ]; then
    url="https://${host}/${repo}/-/releases/${version}/downloads/${release_asset}"
  fi
  binary::download_and_extract "${name}" "${location}" "${url}"
}


#######################################
# @description Install tool
# @arg $1 string Name of tool
#######################################
function _install_tool {
  local name
  dybatpho::expect_args name -- "$@"
  dytoy::is_defined "$name" "$METHOD" && return
  dytoy::is_invalid_essential "$name" && return
  dytoy::install_dependencies "$name"

  local type=""
  if [ "$(dytoy::get_yaml "$name" "github")" != "null" ]; then
    type="github"
  elif [ "$(dytoy::get_yaml "$name" "github")" != "null" ]; then
    type="gitlab"
  fi
  _parse_release "$name" "$type"
}

#######################################
# @description Main function
#######################################
function _main {
  METHOD="binary"
  dytoy::iterate
}

dybatpho::generate_from_spec _spec_main "$@"
