#!{{ .bash }}
source {{ .chezmoi.sourceDir }}/../scripts/lib/dybatpho/init.sh
dybatpho::register_err_handler

function _spec_main {
  dybatpho::opts::setup "Utilities to work with my secrets data" MAIN_ARGS
  dybatpho::opts::param "Log level" LOG_LEVEL --log-level -l init:="info" validate:"dybatpho::validate_log_level \$OPTARG"
  dybatpho::opts::param "Identity type" IDENTITY_TYPE --identity-type -i init:="personal"
  dybatpho::opts::disp "Show help" --help -h action:"dybatpho::generate_help _spec_main"
  dybatpho::opts::cmd decrypt _spec_decrypt
  dybatpho::opts::cmd encrypt _spec_encrypt
}

function _spec_decrypt {
  dybatpho::opts::setup "Decrypt secrets data" DECRYPT_ARGS action:"_decrypt \$DECRYPT_ARGS"
  dybatpho::opts::disp "Show help" --help action:"dybatpho::generate_help _spec_decrypt"
}

function _spec_encrypt {
  dybatpho::opts::setup "Encrypt secrets data" ENCRYPT_ARGS action:"_encrypt \$ENCRYPT_ARGS"
  dybatpho::opts::disp "Show help" --help action:"dybatpho::generate_help _spec_encrypt"
}

function _encrypt {
  dybatpho::expect_args input output -- "$@"
  local input="{{ .chezmoi.sourceDir }}/../secrets/data/${IDENTITY_TYPE}/${input}"
  local output="{{ .chezmoi.sourceDir }}/../secrets/data/${IDENTITY_TYPE}/${output}"
  if ! dybatpho::is file "${input}"; then
    dybatpho::fatal "Input ${input} is not a file"
  fi
  dybatpho::info "Encrypt ${input} to ${output}"
  age -e -a -i ~/.config/chezmoi/"${IDENTITY_TYPE}".key -o $output $input && rm $input
}

function _decrypt {
  dybatpho::expect_args input output -- "$@"
  local input="{{ .chezmoi.sourceDir }}/../secrets/data/${IDENTITY_TYPE}/${input}"
  local output="{{ .chezmoi.sourceDir }}/../secrets/data/${IDENTITY_TYPE}/${output}"
  if ! dybatpho::is file "${input}"; then
    dybatpho::fatal "Input ${input} is not a file"
  fi
  dybatpho::info "Decrypt ${input} to ${output}"
  age -d -i ~/.config/chezmoi/"${IDENTITY_TYPE}".key -o $output $input
}

dybatpho::generate_from_spec _spec_main "$@"
