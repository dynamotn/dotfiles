#!{{ .bash }}
. {{ .chezmoi.sourceDir }}/../scripts/lib/dybatpho/init.sh
. {{ .chezmoi.sourceDir }}/../scripts/lib/dytoy_yaml.sh
. {{ .chezmoi.sourceDir }}/../scripts/lib/misc.sh
dybatpho::register_common_handlers

#######################################
# @description Spec of dytoy_mise
#######################################
function _spec_main {
  dybatpho::opts::setup "Utilities to install binary tools" MAIN_ARGS action:"_main"
  dybatpho::opts::param "Log level" LOG_LEVEL --log-level -l init:="info" validate:"dybatpho::validate_log_level \$OPTARG"
  dybatpho::opts::flag "Dry run" DRY_RUN --dry-run -D on:true off:false init:="false"
  dybatpho::opts::param "Specific tool" TOOL --tool -t init:="@empty"
  dybatpho::opts::flag "Install only essential tool" ONLY_ESSENTIAL --essential -e on:true off:false init:="false"
  dybatpho::opts::flag "Install only not installed tool" ONLY_NOT_INSTALLED --check-installed --no-check-installed -i on:true off:false init:="true"
  dybatpho::opts::disp "Show help" --help -h action:"dybatpho::generate_help _spec_main"
}

#######################################
# @description Install tool
# @arg $1 string Name of tool
#######################################
function _install_tool {
  local name
  dybatpho::expect_args name -- "$@"
  dytoy::is_defined "$name" "$METHOD" && return
  dytoy::is_invalid_essential "$name" && return
  dytoy::is_installed_command "$name" && return
  dytoy::install_dependencies "$name"

  dybatpho::create_temp before_path ".sh"
  dytoy::create_script "$name" "$before_path" "$(dytoy::get_yaml "$name" "hook.before")" "before-hook"
  dytoy::run_script "$before_path"

  dybatpho::progress "Installing tool $name"
  # For some tools need specific backend
  local backend=$(dytoy::get_yaml "$name" "backend")
  if [[ "$backend" = "null" ]]; then
    backend=${name}
  fi

  local version=$(dytoy::get_yaml "$name" "version")
  {{- $command := "$HOME/.local/bin/mise" }}
  {{- if eq .chezmoi.os "android" }}
  {{- $command = "proot -b $PREFIX/etc/resolv.conf:/etc/resolv.conf -b $PREFIX/etc/tls:/etc/ssl $HOME/.local/bin/mise" }}
  {{- end }}

  if [[ "$version" = "null" ]]; then
    version="latest"
  fi
  dybatpho::dry_run {{ $command }} use -g ${backend}@${version}

  dybatpho::create_temp after_path ".sh"
  dytoy::create_script "$name" "$after_path" "$(dytoy::get_yaml "$name" "hook.after")" "after-hook"
  dytoy::run_script "$after_path"

  dybatpho::success "Installed mise tool: $name"
}

#######################################
# @description Main function
#######################################
function _main {
  METHOD="mise"
  misc::install_tool mise
  dytoy::iterate _install_tool
}

dybatpho::generate_from_spec _spec_main "$@"
