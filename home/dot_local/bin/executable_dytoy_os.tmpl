#!{{ .bash }}
# @file dytoy_os
# @brief Install package tools for the current OS
. {{ .chezmoi.sourceDir }}/../scripts/lib/dybatpho/init.sh
. {{ .chezmoi.sourceDir }}/../scripts/lib/package_manager.sh
. {{ .chezmoi.sourceDir }}/../scripts/lib/init_system.sh
. {{ .chezmoi.sourceDir }}/../scripts/lib/dytoy_yaml.sh
. {{ .chezmoi.sourceDir }}/../scripts/lib/misc.sh
dybatpho::register_common_handlers

#######################################
# @description Spec of dytoy_os
#######################################
function _spec_main {
  dybatpho::opts::setup "Utilities to install binary tools" MAIN_ARGS action:"_main"
  dybatpho::opts::param "Log level" LOG_LEVEL --log-level -l init:="info" validate:"dybatpho::validate_log_level \$OPTARG"
  dybatpho::opts::flag "Dry run" DRY_RUN --dry-run -D on:true off:false init:="false"
  dybatpho::opts::param "Specific tool" TOOL  --tool -t init:="@empty"
  dybatpho::opts::flag "Install only essential tool" ONLY_ESSENTIAL --essential -e on:true off:false init:="false"
  dybatpho::opts::flag "Install only not installed tool" ONLY_NOT_INSTALLED --check-installed --no-check-installed -i on:true off:false init:="true"
  dybatpho::opts::flag "Sync package repositories before install" SYNC_REPO --sync --no-sync -s on:true off:false init:="false"
  dybatpho::opts::disp "Show help" --help -h action:"dybatpho::generate_help _spec_main"
}

{{- $shortCode := "" }}
{{- $name := "" }}
{{- if eq .osid "linux-gentoo" }}
{{- $shortCode = "gentoo" }}
{{- $name = "Gentoo Linux" }}
{{- else if eq .osid "linux-arch" }}
{{- $shortCode = "arch" }}
{{- $name = "Arch Linux" }}
{{- else if eq .osid "linux-debian" "linux-ubuntu" }}
{{- $shortCode = "ubuntu" }}
{{- $name = "Debian-based Linux" }}
{{- else if eq .osid "linux-alpine" }}
{{- $shortCode = "alpine" }}
{{- $name = "Alpine" }}
{{- else if eq .osid "android" }}
{{- $shortCode = "termux" }}
{{- $name = "Android" }}
{{- else if eq .osid "darwin" }}
{{- $shortCode = "macos" }}
{{- $name = "MacOS" }}
{{- end }}

#######################################
# @description Install tool
# @arg $1 string Name of tool
#######################################
function _install_tool {
  local name
  dybatpho::expect_args name -- "$@"
  dytoy::is_defined "$name" "$METHOD" && return
  dytoy::is_invalid_essential "$name" && return
  dytoy::install_dependencies "$name"

  dybatpho::create_temp before_path ".sh"
  dytoy::create_script "$name" "$before_path" "$(dytoy::get_yaml "$name" "hook.before")" "before-hook"
  dytoy::run_script "$before_path"

  {{- if eq .chezmoi.os "darwin" }}
  dybatpho::is true "$(dytoy::get_yaml "$name" "need_rosetta")" \
    && dytoy::install_macos_rosetta
  {{- else if eq .chezmoi.os "linux" }}
  # Install flatpak packages if defined
  readarray packages < <(dytoy::get_yaml "$name" "flatpak.packages")
  if [ ${#packages[@]} -gt 0 ]; then
    misc::install_tool flatpak
    pkg::init_flatpak
    for package in "${packages[@]}"; do
      dytoy::install_flatpak_package "$package"
    done
  fi
  {{- end }}
  readarray packages < <(dytoy::get_yaml "$name" "{{ $shortCode }}.packages")
  for package in "${packages[@]}"; do
    dytoy::install_{{ $shortCode }}_package "$package" "{{ .initSystem }}"
  done

  dybatpho::create_temp after_path ".sh"
  dytoy::create_script "$name" "$after_path" "$(dytoy::get_yaml "$name" "hook.after")" "after-hook"
  dytoy::run_script "$after_path"

  dybatpho::success "Installed os tool: $name"
}

#######################################
# @description Main function
#######################################
function _main {
  METHOD="os"
  if [ "$TOOL" = "@empty" ]; then
    dybatpho::info "Distro of this machine is {{ $name }}."
  fi
  if dybatpho::is true "$SYNC_REPO"; then
    pkg::init_{{ $shortCode }}
  fi
  dytoy::iterate _install_tool
}

dybatpho::generate_from_spec _spec_main "$@"
