#!{{ .bash }}
# @file dytoy_os
# @brief Install package tools for the current OS
. {{ .chezmoi.sourceDir }}/../scripts/lib/dybatpho/init.sh
. {{ .chezmoi.sourceDir }}/../scripts/lib/package_manager.sh
dybatpho::register_err_handler

dybatpho::create_temp TEMP_HOOK_BEFORE ".sh"
dybatpho::create_temp TEMP_HOOK_AFTER ".sh"

#######################################
# @description Spec of dytoy_os
#######################################
function _spec_main {
  dybatpho::opts::setup "Utilities to install binary tools" MAIN_ARGS action:"_main"
  dybatpho::opts::param "Log level" LOG_LEVEL --log-level -l init:="info" validate:"dybatpho::validate_log_level \$OPTARG"
  dybatpho::opts::flag "Dry run" DRY_RUN --dry-run -D on:true off:false init:="false"
  dybatpho::opts::param "Specific tool" TOOL  --tool -t init:="@empty"
  dybatpho::opts::flag "Install only essential tool" ONLY_ESSENTIAL --essential -e on:true off:false init:="false"
  dybatpho::opts::flag "Install only not installed tool" ONLY_NOT_INSTALLED --check-installed --no-check-installed -i on:true off:false init:="true"
  dybatpho::opts::flag "Sync package repositories before install" SYNC_REPO --sync --no-sync -s on:true off:false init:="false"
  dybatpho::opts::disp "Show help" --help -h action:"dybatpho::generate_help _spec_main"
}

{{- $shortCode := "" }}
{{- $name := "" }}
{{- if eq .osid "linux-gentoo" }}
{{- $shortCode = "gentoo" }}
{{- $name = "Gentoo Linux" }}
{{- else if eq .osid "linux-arch" }}
{{- $shortCode = "arch" }}
{{- $name = "Arch Linux" }}
{{- else if eq .osid "linux-debian" "linux-ubuntu" }}
{{- $shortCode = "ubuntu" }}
{{- $name = "Debian-based Linux" }}
{{- else if eq .osid "linux-alpine" }}
{{- $shortCode = "alpine" }}
{{- $name = "Alpine" }}
{{- else if eq .osid "android" }}
{{- $shortCode = "termux" }}
{{- $name = "Android" }}
{{- else if eq .osid "darwin" }}
{{- $shortCode = "macos" }}
{{- $name = "MacOS" }}
{{- end }}

#######################################
# @description Install tool
#######################################
function _{{ $shortCode }}_run {
  for tool in "${package_tools[@]}"; do
    tool_name=$(echo "$tool" | yq e '.name')
    if [ "$TOOL" != "@empty" ] && [ "$TOOL" != "$tool_name" ]; then
      continue
    fi
    is_essential=$(echo "$tool" | yq e '.is_essential')
    if dybatpho::is true "$ONLY_ESSENTIAL" && ! dybatpho::is true "$is_essential"; then
      continue
    fi

    hook_before=$(echo "$tool" | yq e -o=j -I=0 -r ".{{ $shortCode }}.hook.before")
    hook_after=$(echo "$tool" | yq e -o=j -I=0 -r ".{{ $shortCode }}.hook.after")
    if [ "$hook_before" != "null" ]; then
      echo ". {{ .chezmoi.sourceDir }}/../scripts/lib/dybatpho/init.sh" > "${TEMP_HOOK_BEFORE}"
      echo "dybatpho::register_err_handler" >> "${TEMP_HOOK_BEFORE}"
      echo "dybatpho::progress \"Running hook before install ${tool_name}\"" >> "${TEMP_HOOK_BEFORE}"
      echo -e "${hook_before}" >> "${TEMP_HOOK_BEFORE}"
    fi
    if [ "$hook_after" != "null" ]; then
      echo ". {{ .chezmoi.sourceDir }}/../scripts/lib/dybatpho/init.sh" > "${TEMP_HOOK_AFTER}"
      echo "dybatpho::register_err_handler" >> "${TEMP_HOOK_AFTER}"
      echo "dybatpho::progress \"Running hook after install ${tool_name}\"" >> "${TEMP_HOOK_AFTER}"
      echo -e "${hook_after}" >> "${TEMP_HOOK_AFTER}"
    fi

    readarray packages < <(echo "$tool" | yq e -o=j -I=0 -r '.{{ $shortCode }}.packages.[]')
    for package in "${packages[@]}"; do
      package_name=$(echo "$package" | yq e '.name')
      if [[ "$package_name" == "null" ]]; then
        continue
      fi

      {{- if eq .osid "linux-gentoo" }}
      repo=$(echo "$package" | yq e '.repo')
      uri=$(echo "$package" | yq e '.uri')

      if [[ "$repo" != "null" ]]; then
        _gentoo_add_repo "$repo" "$uri" > /dev/null
      fi
      if dybatpho::is false $ONLY_NOT_INSTALLED || ! _gentoo_check_installed "$package_name"; then
        _run_hook "$TEMP_HOOK_BEFORE"
        _gentoo_install "$package_name"
        _run_hook "$TEMP_HOOK_AFTER"
        dybatpho::debug "Installed package: $package_name"
      else
        dybatpho::debug "Package $package_name is already installed, skipping."
      fi
      {{- else if eq .osid "linux-debian" "linux-ubuntu" }}
      repo=$(echo "$package" | yq e '.repo')
      if [[ "$repo" != "null" ]]; then
        repo_name=$(echo "$package" | yq e '.repo_name')
        repo_version=$(echo "$package" | yq e '.repo_version')
        distro_version=$(echo "$package" | yq e '.distro_version')
        key=$(echo "$package" | yq e '.key')

        [[ "$repo_name" == "null" ]] && repo_name=$package_name
        [[ "$distro_version" == "null" ]] && distro_version=$(grep -is {{ if eq .osid "linux-ubuntu" }}UBUNTU_CODENAME{{ else }}VERSION_CODENAME{{ end }} /etc/os-release | cut -d= -f2)
        repo_code=$(echo ${repo} | sed "s/%v/${distro_version}/g")
        _ubuntu_add_repo "$repo_name" "$repo_code" "$distro_version" "$repo_version" "$key" > /dev/null
        _ubuntu_sync_repo
      fi
      if dybatpho::is false $ONLY_NOT_INSTALLED || ! _ubuntu_check_installed "$package_name"; then
        _run_hook "$TEMP_HOOK_BEFORE"
        _ubuntu_install "$package_name"
        _run_hook "$TEMP_HOOK_AFTER"
        dybatpho::debug "Installed package: $package_name"
      else
        dybatpho::debug "Package $package_name is already installed, skipping."
      fi
      {{- else if eq .osid "darwin" }}
      package_type=$(echo "$package" | yq e '.type')
      if [[ "$package_type" == "store" ]]; then
        if dybatpho::is false $ONLY_NOT_INSTALLED || ! _macos_mas_check_installed "$package_name"; then
          _run_hook "$TEMP_HOOK_BEFORE"
          _macos_mas_install "$package_name"
          _run_hook "$TEMP_HOOK_AFTER"
          dybatpho::debug "Installed app: $package_name"
        else
          dybatpho::debug "App $package_name is already installed, skipping."
        fi
      else
        unstable=$(echo "$package" | yq e '.unstable')
        if [[ "$package_type" == "cask" ]]; then
          brew_param="--cask"
        else
          brew_param="--formula"
        fi
        if [[ "$unstable" == "true" ]]; then
          brew_param="$brew_param --HEAD"
        fi
        if dybatpho::is false $ONLY_NOT_INSTALLED || ! _macos_brew_check_installed "$package_name"; then
          _run_hook "$TEMP_HOOK_BEFORE"
          _macos_brew_install "$package_name" "$brew_param"
          _run_hook "$TEMP_HOOK_AFTER"
          dybatpho::debug "Installed package: $package_name"
        else
          dybatpho::debug "Package $package_name is already installed, skipping."
        fi
      fi
      {{- else }}
      if dybatpho::is false $ONLY_NOT_INSTALLED || ! _{{ $shortCode }}_check_installed "$package_name"; then
        _run_hook "$TEMP_HOOK_BEFORE"
        _{{ $shortCode }}_install "$package_name"
        _run_hook "$TEMP_HOOK_AFTER"
        dybatpho::debug "Installed package: $package_name"
      else
        dybatpho::debug "Package $package_name is already installed, skipping."
      fi
      {{- end }}
    done
    dybatpho::success "Installed os tool: $tool_name"
  done
}

#######################################
# @description Run a hook script
# @arg $1 string Hook file path
#######################################
function _run_hook {
  dybatpho::expect_args hook_file -- "$@"
  if dybatpho::is true "$DRY_RUN"; then
    echo "DRY_RUN: $hook_file"
    dybatpho::show_file "$hook_file"
  else
    . "$hook_file"
  fi
  echo > "${hook_file}" # Clear the hook file after running
}

#######################################
# @description Main function
#######################################
function _main {
  if [ "$TOOL" = "@empty" ]; then
    dybatpho::info "Install OS tools"
  else
    dybatpho::info "Install OS tool: $TOOL"
  fi
  readarray package_tools < <(yq e -o=j -I=0 'filter(.method == "os") | .[]' ~/.config/dytoy/tools.yaml )

  dybatpho::info "Distro of this machine is {{ $name }}."
  if dybatpho::is true "$SYNC_REPO"; then
    _{{ $shortCode }}_init
  fi
  _{{ $shortCode }}_run

  if [ "$TOOL" = "@empty" ]; then
    dybatpho::success "Installed all OS tools"
  fi
}

dybatpho::generate_from_spec _spec_main "$@"
