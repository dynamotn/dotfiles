#!{{ .bash }}
# @file dyfox
# @brief Update/Refresh your live data of firefox/zen browser to/from your dotfiles
source {{ .chezmoi.sourceDir }}/../scripts/lib/dybatpho/init.sh
dybatpho::register_err_handler

{{- if .browser }}
{{-   $process := "" }}
{{-   $appName := "" }}
{{-   if eq .browser "F" }}
{{-     $appName = "firefox" }}
{{-     if eq .chezmoi.os "darwin" }}
{{-       $process = "/Applications/Firefox.app/Contents/MacOS/firefox" }}
{{-     else if eq .osid "linux-gentoo" }}
{{-       $process = "/usr/lib64/firefox/firefox" }}
{{-     else }}
{{-       $process = "/usr/lib/firefox/firefox" }}
{{-     end }}
{{-   else if eq .browser "Z" }}
{{-     $appName = "zen" }}
{{-     if eq .chezmoi.os "darwin" }}
{{-       $process = "/Applications/Zen.app/Contents/MacOS/zen" }}
{{-     else if eq .osid "linux-gentoo" }}
{{-       $process = "/opt/zen-browser/zen" }}
{{-     else }}
{{-       $process = "/opt/zen-browser-bin/zen" }}
{{-     end }}
{{-   end }}
{{-   $profiles := list "public" }}
{{-   if .decryptPersonal }}
{{-     $profiles = append $profiles "personal" }}
{{-   end }}
{{-   range .decryptEnterprise }}
{{-     $profiles = append $profiles (printf "enterprise-%s" .) }}
{{-   end }}

#######################################
# @description Refresh current live data of {{ $appName }} browser from dotfiles
#######################################
function _refresh_live {
  for profile in {{ range $profiles }}{{ . | quote }} {{ end }}; do
    if [ "$PROFILE" = "" ] || [ "$PROFILE" = "$profile" ]; then
      dybatpho::dry_run rm -rf ~/.config/firefox/profiles/${profile}
      dybatpho::dry_run chezmoi apply ~/.config/firefox/profiles/${profile} --force || true
    else
      dybatpho::debug "$PROFILE"
    fi
  done
}

#######################################
# @description Update current live data of {{ $appName }} browser to dotfiles
#######################################
function _update_dotfiles {
  for profile in {{ range $profiles }}{{ . | quote }} {{ end }}; do
    if [ "$PROFILE" = "" ] || [ "$PROFILE" = "$profile" ]; then
      if dybatpho::is file ~/.config/firefox/profiles/${profile}/prefs.js; then
        dybatpho::progress "Update toolbar setting for profile ${profile}"
        dybatpho::dry_run eval "grep \"browser.uiCustomization.state\" ~/.config/firefox/profiles/${profile}/prefs.js > {{ .chezmoi.sourceDir }}/.chezmoitemplates/firefox/prefs/${profile}/01-toolbar.js" || true

        dybatpho::progress "Update addon setting for profile ${profile}"
        dybatpho::dry_run eval "grep \"extensions.webextensions.uuids\" ~/.config/firefox/profiles/${profile}/prefs.js > {{ .chezmoi.sourceDir }}/.chezmoitemplates/firefox/prefs/${profile}/02-extensions.js" || true
        dybatpho::dry_run eval "grep \"extensions.webextensions.ExtensionStorageIDB.migrated\" ~/.config/firefox/profiles/${profile}/prefs.js >> {{ .chezmoi.sourceDir }}/.chezmoitemplates/firefox/prefs/${profile}/02-extensions.js" || true
        dybatpho::dry_run eval "grep \"privacy.userContext.extension\" ~/.config/firefox/profiles/${profile}/prefs.js >> {{ .chezmoi.sourceDir }}/.chezmoitemplates/firefox/prefs/${profile}/02-extensions.js" || true
      fi

      dybatpho::progress "Update containers for profile ${profile}"
      dybatpho::dry_run chezmoi add ~/.config/firefox/profiles/${profile}/containers.json --create || true

      dybatpho::progress "Update extensions data for profile ${profile}"
      for filename in addons.json addonStartup.json.lz4 extensions.json extension-preferences.json; do
        dybatpho::dry_run chezmoi add ~/.config/firefox/profiles/${profile}/${filename} --create || true
      done

      dybatpho::progress "Update search engines for profile ${profile}"
      dybatpho::dry_run chezmoi add ~/.config/firefox/profiles/${profile}/search.json.mozlz4 --create || true

      dybatpho::progress "Update bookmarks, history and workspaces for profile ${profile}"
      if [ "${profile}" = "public" ]; then
        for filename in favicons places; do
          dybatpho::dry_run chezmoi add ~/.config/thunderbird/profiles/${profile}/${filename}.sqlite --create || true
        done
      else
        declare -a filenames=("favicons" "places")
        printf "%s\n" "${filenames[@]}" | xargs -P$(nproc) -I{} bash -c "dybatpho::dry_run chezmoi-dycrypt encrypt -i ${profile} -f ~/.config/firefox/profiles/${profile} -a 'create' '{}.sqlite'" || true
      fi

      dybatpho::progress "Update storage data for profile ${profile}"
      if [ "${profile}" = "public" ]; then
        dybatpho::dry_run chezmoi add ~/.config/thunderbird/profiles/${profile}/storage.sqlite --create || true
        dybatpho::dry_run chezmoi add ~/.config/firefox/profiles/${profile}/storage/default/moz-extension+++* --create || true
      else
        dybatpho::dry_run chezmoi-dycrypt encrypt -i ${profile} -f ~/.config/firefox/profiles/${profile} -a "create" "storage.sqlite" || true
        if dybatpho::is dir ~/.config/firefox/profiles/${profile}/storage/default; then
          export -f _encrypt_file
          command find ~/.config/firefox/profiles/${profile}/storage/default/moz-extension+++* -type f | xargs -P$(nproc) -I{} \
            bash -c "_encrypt_file '${profile}' '{}'" || true
        fi
      fi

      if dybatpho::is true "${COOKIES}"; then
        dybatpho::progress "Update cookies for profile ${profile}"
        if [ "${profile}" = "public" ]; then
          dybatpho::dry_run chezmoi add ~/.config/firefox/profiles/${profile}/cookies.sqlite --create || true
        else
          dybatpho::dry_run chezmoi-dycrypt encrypt -i ${profile} -f ~/.config/firefox/profiles/${profile} -a "create" "cookies.sqlite" || true
        fi
      fi

      {{ if eq .browser "Z" -}}
      dybatpho::progress "Update Zen customization for profile ${profile}"
      for filename in zen-themes.json zen-keyboard-shortcuts.json; do
        dybatpho::dry_run chezmoi add ~/.config/firefox/profiles/${profile}/${filename} --create || true
      done
      {{- end }}
    else
      dybatpho::debug "$PROFILE"
    fi
  done
}

#######################################
# @description Encrypt a file with chezmoi-dycrypt
# @arg $1 string ID of profile
# @arg $2 string Path of file
#######################################
function _encrypt_file {
  dybatpho::expect_args profile file -- "$@"
  local folder="$(dirname "$file")"
  local filename="$(basename "$file")"
  dybatpho::dry_run chezmoi-dycrypt encrypt -i "${profile}" -f "${folder}" -a "create" "${filename}"
}

#######################################
# @description Main function
#######################################
function _main {
  dybatpho::info "Your web browser in chezmoi settings is {{ $appName }}"

  if [ "$(pgrep -f {{ $process }} | wc -l)" -gt 0 ]; then
    dybatpho::fatal "{{ $appName }} is running"
  elif dybatpho::is true "${REFRESH}"; then
    dybatpho::notice "Refresh from scratch {{ $appName }} settings"
    _refresh_live
    dybatpho::success "Refresh from scratch {{ $appName }} settings"
  else
    dybatpho::notice "Update {{ $appName }} settings"
    _update_dotfiles
    dybatpho::success "Update {{ $appName }} settings"
  fi
}

#######################################
# @description Spec of dyfox cli
#######################################
function _spec_main {
  dybatpho::opts::setup "Update/Refresh your live data of {{ $appName }} browser to/from your dotfiles" MAIN_ARGS action:"_main"
  dybatpho::opts::param "Log level" LOG_LEVEL --log-level -l init:="info" validate:"dybatpho::validate_log_level \$OPTARG"
  dybatpho::opts::flag "Dry run" DRY_RUN --dry-run -D on:true off:false init:="false"
  dybatpho::opts::param "Profile code" PROFILE --profile -p validate:"_validate_profile"
  dybatpho::opts::flag "Refresh from scratch live data" REFRESH --refresh -r on:true off:false init:="false"
  dybatpho::opts::flag "Include cookies" COOKIES --cookies --no-cookies -c on:true off:false init:="true"
  dybatpho::opts::disp "Show help" --help action:"dybatpho::generate_help _spec_main"
}

#######################################
# @description Validate profile code
#######################################
function _validate_profile {
  for profile in {{ range $profiles }}{{ . | quote }} {{ end }}; do
    if [ "$OPTARG" = "" ] || [ "$OPTARG" = "$profile" ]; then
      return 0
    fi
  done
  dybatpho::error "Profile must be one of this list: {{ range $profiles }}'{{ . }}' {{ end }}"
  return 1
}

dybatpho::generate_from_spec _spec_main "$@"
{{- end }}
