#!{{ .bash }}
. {{ .chezmoi.sourceDir }}/../scripts/lib/dybatpho/init.sh
. {{ .chezmoi.sourceDir }}/../scripts/lib/dytoy_yaml.sh
dybatpho::register_err_handler

#######################################
# @description Spec of dytoy_shell
#######################################
function _spec_main {
  dybatpho::opts::setup "Utilities to install binary tools" MAIN_ARGS action:"_main"
  dybatpho::opts::param "Log level" LOG_LEVEL --log-level -l init:="info" validate:"dybatpho::validate_log_level \$OPTARG"
  dybatpho::opts::flag "Dry run" DRY_RUN --dry-run -D on:true off:false init:="false"
  dybatpho::opts::param "Specific tool" TOOL  --tool -t init:="@empty"
  dybatpho::opts::flag "Install only essential tool" ONLY_ESSENTIAL --essential -e on:true off:false init:="false"
  dybatpho::opts::flag "Install only not installed tool" ONLY_NOT_INSTALLED --check-installed --no-check-installed -i on:true off:false init:="true"
  dybatpho::opts::disp "Show help" --help -h action:"dybatpho::generate_help _spec_main"
}

#######################################
# @description Install tool
# @arg $1 string Name of tool
#######################################
function _install_tool {
  local name
  dybatpho::expect_args name -- "$@"
  dytoy::is_installed_command "$name" && return
  dytoy::is_defined "$name" "$METHOD" && return
  dytoy::is_invalid_essential "$name" && return
  dytoy::install_dependencies "$name"

  dybatpho::progress "Installing tool $name"
  dybatpho::create_temp path ".sh"
  dytoy::create_script "$name" "$path" "$(dytoy::get_yaml "$name" "content")" "commands"
  dytoy::run_script "$path"
  dybatpho::success "Installed shell tool: $name"
}

#######################################
# @description Main function
#######################################
function _main {
  METHOD="shell"
  dytoy::iterate
}

dybatpho::generate_from_spec _spec_main "$@"
