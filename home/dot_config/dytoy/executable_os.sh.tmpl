#!{{ lookPath "bash" }}
set -Eeou pipefail
source {{ .chezmoi.sourceDir }}/../scripts/lib/message.sh
source {{ .chezmoi.sourceDir }}/../scripts/lib/package_manager.sh
TEMP_HOOK_BEFORE=$(mktemp)
TEMP_HOOK_AFTER=$(mktemp)
trap "rm -rf $TEMP_HOOK_BEFORE $TEMP_HOOK_AFTER && echo \"Install tools failed\"" ERR

_usage() {
  echo "$0 usage:" && grep -E " \w) #" "$0" | sed -e 's/\(.\)) #/-\1/g'
  exit 0
}

_parse_args() {
  while getopts ":het:" arg; do
    case $arg in
      e) # Update only essential tool
        FLAG_IS_ESSENTIAL=true
        ;;
      t) # Only one specific tool
        TOOL=$OPTARG
        ;;
      h) # Display help
        _usage
        ;;
      *) ;;
    esac
  done
}

{{- $shortCode := "" }}
{{- $name := "" }}
{{- if eq .chezmoi.os "linux" }}
{{- if eq .chezmoi.osRelease.id "gentoo" }}
{{- $shortCode = "gentoo" }}
{{- $name = "Gentoo Linux" }}
{{- else if eq .chezmoi.osRelease.id "arch" }}
{{- $shortCode = "arch" }}
{{- $name = "Arch Linux" }}
{{- else if eq .chezmoi.osRelease.id "debian" "ubuntu" }}
{{- $shortCode = "ubuntu" }}
{{- $name = "Debian-based Linux" }}
{{- end }}
{{- else if eq .chezmoi.os "android" }}
{{- $shortCode = "termux" }}
{{- $name = "Android" }}
{{- else if eq .chezmoi.os "darwin" }}
{{- $shortCode = "macos" }}
{{- $name = "MacOS" }}
{{- end }}

_{{ $shortCode }}_run() {
  for tool in "${package_tools[@]}"; do
    tool_name=$(echo "$tool" | yq e '.name')
    if [ "$TOOL" != "" ] && [ "$TOOL" != "$tool_name" ]; then
      continue
    fi
    is_essential=$(echo "$tool" | yq e '.is_essential')
    if [ "$FLAG_IS_ESSENTIAL" = true ] && [ "$is_essential" != "true" ]; then
      continue
    fi

    hook_before=$(echo "$tool" | yq e -o=j -I=0 -r ".{{ $shortCode }}.hook.before")
    hook_after=$(echo "$tool" | yq e -o=j -I=0 -r ".{{ $shortCode }}.hook.after")
    if [ "$hook_before" != "null" ]; then
      echo "source {{ .chezmoi.sourceDir }}/../scripts/lib/message.sh" > "${TEMP_HOOK_BEFORE}"
      echo "_progress \"Running hook before install ${tool_name}\"" >> "${TEMP_HOOK_BEFORE}"
      echo -e "${hook_before}" >> "${TEMP_HOOK_BEFORE}"
      {{ lookPath "bash" }} ${TEMP_HOOK_BEFORE}
    fi

    readarray packages < <(echo "$tool" | yq e -o=j -I=0 -r '.{{ $shortCode }}.packages.[]')
    for package in "${packages[@]}"; do
      package_name=$(echo "$package" | yq e '.name')
      if [[ "$package_name" == "null" ]]; then
        continue
      fi

      {{- if and (eq .chezmoi.os "linux") (eq .chezmoi.osRelease.id "gentoo") }}
      accept_keywords=$(echo "$package" | yq e '.accept_keywords')
      if [[ "$accept_keywords" != "null" ]]; then
        sudo mkdir -p $(dirname "/etc/portage/package.accept_keywords/$package_name")
        sudo touch "/etc/portage/package.accept_keywords/$package_name"
        echo "$accept_keywords" | sudo tee "/etc/portage/package.accept_keywords/$package_name" > /dev/null
      fi
      use=$(echo "$package" | yq e '.use')
      if [[ "$use" != "null" ]]; then
        sudo touch "/etc/portage/package.use/$package_name"
        echo "$use" | sudo tee "/etc/portage/package.use/$package_name" > /dev/null
      fi

      repo=$(echo "$package" | yq e '.repo')

      if [[ "$repo" != "null" ]]; then
        _gentoo_install "$package_name::$repo"
      else
        _gentoo_install "$package_name"
      fi
      {{- else if and (eq .chezmoi.os "linux") (eq .chezmoi.osRelease.id "debian" "ubuntu") }}
      repo=$(echo "$package" | yq e '.repo')
      if [[ "$repo" != "null" ]]; then
        repo_name=$(echo "$package" | yq e '.repo_name')
        repo_version=$(echo "$package" | yq e '.repo_version')
        distro_version=$(echo "$package" | yq e '.distro_version')
        key=$(echo "$package" | yq e '.key')

        [[ "$repo_name" == "null" ]] && repo_name=$package_name
        [[ "$distro_version" == "null" ]] && distro_version=$(grep -is {{ if eq .chezmoi.osRelease.id "ubuntu" }}UBUNTU_CODENAME{{ else }}VERSION_CODENAME{{ end }} /etc/os-release | cut -d= -f2)
        repo=$(echo ${repo} | sed "s/%v/${distro_version}/g")
        if [ ! -f "/etc/apt/sources.list.d/$repo_name.list" ]; then
          echo "deb $repo $distro_version $repo_version" | sudo tee /"etc/apt/sources.list.d/$repo_name.list"
          curl -sSL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x$key" | sudo apt-key add -
        fi
        _ubuntu_repo_sync
      fi
      _ubuntu_install "$package_name"
      {{- else if and (eq .chezmoi.os "linux") (eq .chezmoi.osRelease.id "debian" "ubuntu") }}
      package_param=$(echo "$package" | yq e '.param')
      if [[ "$package_param" == "null" ]]; then
        package_param=""
      fi
      _macos_install "$package_name" "$package_param"
      {{- else }}
      _{{ $shortCode }}_install "$package_name"
      {{- end }}
    done
    if [ "$hook_after" != "null" ]; then
      echo "source {{ .chezmoi.sourceDir }}/../scripts/lib/message.sh" > "${TEMP_HOOK_AFTER}"
      echo "_progress \"Running hook after install ${tool_name}\"" >> "${TEMP_HOOK_AFTER}"
      echo -e "${hook_after}" >> "${TEMP_HOOK_AFTER}"
      {{ lookPath "bash" }} ${TEMP_HOOK_AFTER}
    fi
  done
}

_main() {
  if [ "$TOOL" = "" ]; then
    _info "Install package tools"
  else
    _info "Install package tool: $TOOL"
  fi
  readarray package_tools < <(yq e -o=j -I=0 'filter(.method == "os") | .[]' ~/.config/dytoy/tools.yaml )

  _info "Distro of this machine is {{ $name }}."
  {{- if eq .chezmoi.os "linux" }}
  {{- if eq .chezmoi.osRelease.id "gentoo" }}
  _gentoo_run
  {{- else if eq .chezmoi.osRelease.id "arch" }}
  _arch_init && _arch_run
  {{- else if eq .chezmoi.osRelease.id "debian" "ubuntu" }}
  _ubuntu_init && _ubuntu_run
  {{- end }}
  {{- else if eq .chezmoi.os "android" }}
  _termux_init && _termux_run
  {{- else if eq .chezmoi.os "darwin" }}
  _macos_run
  {{- end }}

  _success "Installed package tools"
}

TOOL=
FLAG_IS_ESSENTIAL=false
_parse_args "$@"

_main
