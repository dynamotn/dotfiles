#!{{ .bash }}
source {{ .chezmoi.sourceDir }}/../scripts/lib/dybatpho/init.sh
dybatpho::register_err_handler

TEMP_COMPRESSED=$(mktemp)
dybatpho::cleanup_file_on_exit "$TEMP_COMPRESSED"
TEMP_HOOK_BEFORE=$(mktemp)
dybatpho::cleanup_file_on_exit "$TEMP_HOOK_BEFORE"
TEMP_HOOK_AFTER=$(mktemp)
dybatpho::cleanup_file_on_exit "$TEMP_HOOK_AFTER"

SCRIPT_DIR=$(dirname "$(readlink -f "$0")")
export BIN_DIR=$HOME/.local/bin
export MAN_DIR=$HOME/.local/man

_usage() {
  echo "$0 usage:" && grep -E " \w) #" "$0" | sed -e 's/\(.\)) #/-\1/g'
  exit 0
}

_parse_args() {
  while getopts ":hnedt:" arg; do
    case $arg in
      n) # Update only not existed tool
        FLAG_NOT_EXIST=true
        ;;
      e) # Update only essential tool
        FLAG_IS_ESSENTIAL=true
        ;;
      h) # Display help
        _usage
        ;;
      t) # Only one specific tool
        TOOL=$OPTARG
        ;;
      d) # Debug mode
        DEBUG=true
        ;;
      *) ;;
    esac
  done
}

# Extract from tar compressed release file
# $1: URL of file
# $2: Path of file in archive
# $3: Strip components
_extract_tar() {
  local param=""
  if [ "$DEBUG" = true ]; then
    param="-vt"
  else
    param="-x"
  fi
  if [[ "$1" =~ \.(tar\.gz|tgz)$ ]]; then
    param="${param}z"
  elif [[ "$1" =~ \.(tar\.xz|xz)$ ]]; then
    param="${param}J"
  elif [[ "$1" =~ \.(tar\.bz2|tbz2|tbz)$ ]]; then
    param="${param}j"
  elif [[ "$1" =~ \.(tar\.zst)$ ]]; then
    param="${param} --zstd"
  fi

  if [ "$3" != "null" ]; then
    param="${param} --strip=$3"
  fi
  param="${param} -f $TEMP_COMPRESSED"
  if [ "$DEBUG" = true ]; then
    tar ${param}
  else
    bash $TEMP_HOOK_BEFORE
    readarray paths < <(echo "$2" | yq e -o=j -I=0 -r '.[]')
    for path in "${paths[@]}"; do
      tar ${param} -C "$location" $(echo ${path%%*( )} | sed "s/%v/${version}/g" | sed "s/%1v/${version:1}/g")
    done
    export param=$param
    bash $TEMP_HOOK_AFTER
  fi
}

# Extract from zip compressed release file
# $1: URL of file
# $2: Path of file in archive
_extract_zip() {
  if [ "$DEBUG" = true ]; then
    unzip -Zl $TEMP_COMPRESSED
  else
    bash $TEMP_HOOK_BEFORE
    readarray paths < <(echo "$2" | yq e -o=j -I=0 -r '.[]')
    for path in "${paths[@]}"; do
      unzip -qqoj $TEMP_COMPRESSED -d $location $(echo ${path%%*( )} | sed "s/%v/${version}/g" | sed "s/%1v/${version:1}/g")
    done
    bash $TEMP_HOOK_AFTER
  fi
}

# Extract from bzip2 compressed release file
# $1: URL of file
# $2: File name of command
_extract_bzip2() {
  bash $TEMP_HOOK_BEFORE
  readarray paths < <(echo "$2" | yq e -o=j -I=0 -r '.[]')
  bzip2 -cd $TEMP_COMPRESSED > $location/$2
  bash $TEMP_HOOK_AFTER
}

# Update tool by get from release file
# $1: URL of file
# $2: File name of command
# $3: Path of file in archive
# $4: Strip components
_update() {
  if [[ "$1" =~ \.(tar\.gz|tgz|tar\.xz|tar\.bz2|tbz2|xz|tar|tar\.zst|tbz)$ ]]; then
    curl -SL "$1" -o "$TEMP_COMPRESSED"
    _extract_tar "$1" "$3" "$4"
    echo > "$TEMP_HOOK_BEFORE"
    echo > "$TEMP_HOOK_AFTER"
    rm -rf "$TEMP_COMPRESSED"
  elif [[ "$1" =~ \.zip$ ]]; then
    curl -SL "$1" -o "$TEMP_COMPRESSED"
    _extract_zip "$1" "$3"
    echo > "$TEMP_HOOK_BEFORE"
    echo > "$TEMP_HOOK_AFTER"
    rm -rf "$TEMP_COMPRESSED"
  elif [[ "$1" =~ \.bz2$ ]]; then
    curl -SL "$1" -o "$TEMP_COMPRESSED"
    _extract_bzip2 "$1" "$2"
    echo > "$TEMP_HOOK_BEFORE"
    echo > "$TEMP_HOOK_AFTER"
    rm -rf "$TEMP_COMPRESSED"
  else
    curl -SL "$1" -o "$location/$2"
  fi
  chmod +x "$location/$2"
  dybatpho::progress "Installed $2"
}

# Parse config file and update tool
# by get from Github release file
# $1: YAML string of tool
_parse_github_release() {
  name=$(echo "$1" | yq e '.name')
  location=$(echo "$1" | yq e '.location')
  if [ "$location" = "null" ]; then
    location=$BIN_DIR
  fi
  mkdir -p $location
  if [ "$FLAG_NOT_EXIST" = true ] && [ -f "$location/$name" ]; then
    return
  fi

  is_essential=$(echo "$1" | yq e '.is_essential')
  if [ "$FLAG_IS_ESSENTIAL" = true ] && [ "$is_essential" != "true" ]; then
    return
  fi

  dybatpho::progress "Installing ${name}"
  repo=$(echo "$1" | yq e '.github.repo')
  version=$(echo "$1" | yq e '.github.version')
  release_asset=$(echo "$1" | yq e '.github.release_asset')
  strip_components=$(echo "$1" | yq e '.archive.strip_components')
  paths=$(echo "$1" | yq e '.archive.paths')

  dybatpho::progress "Checking ${name} from ${repo}"
  if [ "$version" = "latest" ] || [ "$version" = "null" ]; then
    version=$(curl -sSL -u "${GITHUB_API_USERNAME}:${GITHUB_API_TOKEN}" "https://api.github.com/repos/${repo}/releases/latest" | grep -Po "tag_name\": \"(\K.*)(?=\",)")
  fi
  if [ "$version" = "" ]; then
    dybatpho::error "Version is not specified or you're limited request to Github API"
  else
    dybatpho::info "Using version ${version} for https://github.com/${repo}"
  fi
  release_asset=$(echo ${release_asset} | sed "s/%v/${version}/g" | sed "s/%1v/${version:1}/g")

  hook_before=$(yq e -o=j -I=0 -r "filter(.name == \"${name}\") | .[].archive.hook.before" ~/.config/dytoy/tools.yaml | sed "s/%v/${version}/g" | sed "s/%1v/${version:1}/g")
  hook_after=$(yq e -o=j -I=0 -r "filter(.name == \"${name}\") | .[].archive.hook.after" ~/.config/dytoy/tools.yaml | sed "s/%v/${version}/g" | sed "s/%1v/${version:1}/g")
  if [ "$hook_before" != "null" ]; then
    echo "source {{ .chezmoi.sourceDir }}/../scripts/lib/dybatpho/init.sh" > "${TEMP_HOOK_BEFORE}"
    echo "dybatpho::register_err_handler" >> "${TEMP_HOOK_BEFORE}"
    echo "dybatpho::progress \"Running hook before install ${name}\"" >> "${TEMP_HOOK_BEFORE}"
    echo -e "${hook_before}" >> "${TEMP_HOOK_BEFORE}"
  fi
  if [ "$hook_after" != "null" ]; then
    echo "source {{ .chezmoi.sourceDir }}/../scripts/lib/dybatpho/init.sh" > "${TEMP_HOOK_AFTER}"
    echo "dybatpho::register_err_handler" >> "${TEMP_HOOK_AFTER}"
    echo "dybatpho::progress \"Running hook after install ${name}\"" >> "${TEMP_HOOK_AFTER}"
    echo -e "${hook_after}" >> "${TEMP_HOOK_AFTER}"
  fi

  export TEMP_COMPRESSED=$TEMP_COMPRESSED
  export location=$location
  export MAN_DIR=$MAN_DIR
  export version=$version
  _update "https://github.com/${repo}/releases/download/${version}/${release_asset}" "${name}" "${paths}" "${strip_components}"
}

# Parse config file and update tool
# by get from Gitlab release file
# $1: YAML string of tool
_parse_gitlab_release() {
  name=$(echo "$1" | yq e '.name')
  location=$(echo "$1" | yq e '.location')
  if [ "$location" = "null" ]; then
    location=$BIN_DIR
  fi
  mkdir -p $location
  if [ "$FLAG_NOT_EXIST" = true ] && [ -f "$location/$name" ]; then
    return
  fi

  is_essential=$(echo "$1" | yq e '.is_essential')
  if [ "$FLAG_IS_ESSENTIAL" = true ] && [ "$is_essential" != "true" ]; then
    return
  fi

  dybatpho::progress "Installing ${name}"
  host=$(echo "$1" | yq e '.gitlab.host')
  if [ "$host" = "null" ]; then
    host="gitlab.com"
  fi

  repo=$(echo "$1" | yq e '.gitlab.repo')
  version=$(echo "$1" | yq e '.gitlab.version')
  release_asset=$(echo "$1" | yq e '.gitlab.release_asset')
  strip_components=$(echo "$1" | yq e '.archive.strip_components')
  paths=$(echo "$1" | yq e '.archive.paths')

  dybatpho::progress "Checking ${name} from ${repo}"
  if [ "$version" = "latest" ]; then
    version=$(curl -sSL -u "${GITLAB_API_USERNAME}:${GITLAB_API_TOKEN}" "https://gitlab.com/api/v4/projects/$(echo $repo | sed -e "s/\//%2f/g")/releases/permalink/latest" | yq ".tag_name")
  fi
  if [ "$version" = "" ]; then
    dybatpho::error "Version is not specified or you're limited request to Github API"
  else
    dybatpho::info "Using version ${version} for https://gitlab.com/${repo}"
  fi
  release_asset=$(echo ${release_asset} | sed "s/%v/${version}/g" | sed "s/%1v/${version:1}/g")

  hook_before=$(yq e -o=j -I=0 -r "filter(.name == \"${name}\") | .[].archive.hook.before" ~/.config/dytoy/tools.yaml | sed "s/%v/${version}/g" | sed "s/%1v/${version:1}/g")
  hook_after=$(yq e -o=j -I=0 -r "filter(.name == \"${name}\") | .[].archive.hook.after" ~/.config/dytoy/tools.yaml | sed "s/%v/${version}/g" | sed "s/%1v/${version:1}/g")
  if [ "$hook_before" != "null" ]; then
    echo "source {{ .chezmoi.sourceDir }}/../scripts/lib/dybatpho/init.sh" > "${TEMP_HOOK_BEFORE}"
    echo "dybatpho::progress \"Running hook before install ${name}\"" >> "${TEMP_HOOK_BEFORE}"
    echo -e "${hook_before}" >> "${TEMP_HOOK_BEFORE}"
  fi
  if [ "$hook_after" != "null" ]; then
    echo "source {{ .chezmoi.sourceDir }}/../scripts/lib/dybatpho/init.sh" > "${TEMP_HOOK_AFTER}"
    echo "dybatpho::progress \"Running hook after install ${name}\"" >> "${TEMP_HOOK_AFTER}"
    echo -e "${hook_after}" >> "${TEMP_HOOK_AFTER}"
  fi

  export TEMP_COMPRESSED=$TEMP_COMPRESSED
  export location=$location
  export MAN_DIR=$MAN_DIR
  export version=$version
  _update "https://gitlab.com/${repo}/-/releases/${version}/downloads/${release_asset}" "${name}" "${paths}" "${strip_components}"
}

_main() {
  if [ "$TOOL" = "" ]; then
    dybatpho::info "Install binary tools"
  else
    dybatpho::info "Install binary tool: $TOOL"
  fi
  readarray binary_tools < <(yq e -o=j -I=0 'filter(.method == "binary") | .[]' ~/.config/dytoy/tools.yaml )
  for binary in "${binary_tools[@]}"; do
    name=$(echo "$binary" | yq e '.name')
    if [ "$TOOL" = "" ] || [ "$TOOL" = "$name" ]; then
      if [ "$(echo "$binary" | yq e '.github')" != "null" ]; then
        _parse_github_release "$binary"
      elif [ "$(echo "$binary" | yq e '.gitlab')" != "null" ]; then
        _parse_gitlab_release "$binary"
      fi
    fi
  done
  dybatpho::success "Installed binary tools"
}

TOOL=
FLAG_IS_ESSENTIAL=false
FLAG_NOT_EXIST=false
DEBUG=false
_parse_args "$@"

GITHUB_API_USERNAME=${GITHUB_API_USERNAME:-dynamotn}
GITHUB_API_TOKEN=${GITHUB_API_TOKEN:-}
GITLAB_API_USERNAME=${GITLAB_API_USERNAME:-dynamotn}
GITLAB_API_TOKEN=${GITLAB_API_TOKEN:-}
_main
