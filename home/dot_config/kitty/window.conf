# vim:fileencoding=utf-8 filetype=conf
#: If enabled, the OS Window size will be remembered so that new
#: instances of kitty will have the same size as the previous
#: instance. If disabled, the OS Window will initially have size
#: configured by initial_window_width/height, in pixels. You can use a
#: suffix of "c" on the width/height values to have them interpreted
#: as number of cells instead of pixels.
remember_window_size  yes
initial_window_width  640
initial_window_height 400

#: The enabled window layouts. A comma separated list of layout names.
#: The special value all means all layouts. The first listed layout
#: will be used as the startup layout. Default configuration is all
#: layouts in alphabetical order. For a list of available layouts, see
#: the layouts <https://sw.kovidgoyal.net/kitty/overview/#layouts>.
enabled_layouts *

#: The step size (in units of cell width/cell height) to use when
#: resizing kitty windows in a layout with the shortcut
#: start_resizing_window. The cells value is used for horizontal
#: resizing, and the lines value is used for vertical resizing.
window_resize_step_cells 2
window_resize_step_lines 2

#: The width of window borders. Can be either in pixels (px) or pts
#: (pt). Values in pts will be rounded to the nearest number of pixels
#: based on screen resolution. If not specified, the unit is assumed
#: to be pts. Note that borders are displayed only when more than one
#: window is visible. They are meant to separate multiple windows.
window_border_width 1.0

#: Draw only the minimum borders needed. This means that only the
#: borders that separate the window from a neighbor are drawn. Note
#: that setting a non-zero window_margin_width overrides this and
#: causes all borders to be drawn.
draw_minimal_borders yes

#: The window margin (in pts) (blank area outside the border). A
#: single value sets all four sides. Two values set the vertical and
#: horizontal sides. Three values set top, horizontal and bottom. Four
#: values set top, right, bottom and left.
window_margin_width 0.0

#: The window margin to use when only a single window is visible (in
#: pts). Negative values will cause the value of window_margin_width
#: to be used instead. A single value sets all four sides. Two values
#: set the vertical and horizontal sides. Three values set top,
#: horizontal and bottom. Four values set top, right, bottom and left.
single_window_margin_width -1000.0

#: The window padding (in pts) (blank area between the text and the
#: window border). A single value sets all four sides. Two values set
#: the vertical and horizontal sides. Three values set top, horizontal
#: and bottom. Four values set top, right, bottom and left.
window_padding_width 0.0

#: When the window size is not an exact multiple of the cell size, the
#: cell area of the terminal window will have some extra padding on
#: the sides. You can control how that padding is distributed with
#: this option. Using a value of center means the cell area will be
#: placed centrally. A value of top-left means the padding will be
#: only at the bottom and right edges. The value can be one of: top-
#: left, top, top-right, left, center, right, bottom-left, bottom,
#: bottom-right.
placement_strategy center

#: The color for the border of the active window. Set this to none to
#: not draw borders around the active window.
active_border_color #B7BDF8

#: The color for the border of inactive windows.
inactive_border_color #6E738D


#: The color for the border of inactive windows in which a bell has
#: occurred.
bell_border_color #EED49F

#: Fade the text in inactive windows by the specified amount (a number
#: between zero and one, with zero being fully faded).
inactive_text_alpha 1.0

#: Hide the window decorations (title-bar and window borders) with
#: yes. On macOS, titlebar-only and titlebar-and-corners can be used
#: to only hide the titlebar and the rounded corners. Whether this
#: works and exactly what effect it has depends on the window
#: manager/operating system. Note that the effects of changing this
#: option when reloading config are undefined. When using titlebar-
#: only, it is useful to also set window_margin_width and
#: placement_strategy to prevent the rounded corners from clipping
#: text. Or use titlebar-and-corners.
hide_window_decorations no

#: Path to a logo image. Must be in PNG/JPEG/WEBP/GIF/TIFF/BMP format.
#: Relative paths are interpreted relative to the kitty config
#: directory. The logo is displayed in a corner of every kitty window.
#: The position is controlled by window_logo_position. Individual
#: windows can be configured to have different logos either using the
#: launch action or the remote control
#: <https://sw.kovidgoyal.net/kitty/remote-control/> facility.
# window_logo_path none

#: Where to position the window logo in the window. The value can be
#: one of: top-left, top, top-right, left, center, right, bottom-left,
#: bottom, bottom-right.
# window_logo_position bottom-right

#: The amount the logo should be faded into the background. With zero
#: being fully faded and one being fully opaque.
# window_logo_alpha 0.5

#: The percentage (0-100] of the window size to which the logo should
#: scale. Using a single number means the logo is scaled to that
#: percentage of the shortest window dimension, while preserving
#: aspect ratio of the logo image.
#: Using two numbers means the width and height of the logo are scaled
#: to the respective percentage of the window's width and height.
#: Using zero as the percentage disables scaling in that dimension. A
#: single zero (the default) disables all scaling of the window logo.
# window_logo_scale 0

#: The time to wait (in seconds) before asking the program running in
#: kitty to resize and redraw the screen during a live resize of the
#: OS window, when no new resize events have been received, i.e. when
#: resizing is either paused or finished. On platforms such as macOS,
#: where the operating system sends events corresponding to the start
#: and end of a live resize, the second number is used for redraw-
#: after-pause since kitty can distinguish between a pause and end of
#: resizing. On such systems the first number is ignored and redraw is
#: immediate after end of resize. On other systems only the first
#: number is used so that kitty is "ready" quickly after the end of
#: resizing, while not also continuously redrawing, to save energy.
resize_debounce_time 0.1

#: Resize the OS window in steps as large as the cells, instead of
#: with the usual pixel accuracy. Combined with initial_window_width
#: and initial_window_height in number of cells, this option can be
#: used to keep the margins as small as possible when resizing the OS
#: window. Note that this does not currently work on Wayland.
resize_in_steps no

#: The list of characters for visual window selection. For example,
#: for selecting a window to focus on with focus_visible_window. The
#: value should be a series of unique numbers or alphabets, case
#: insensitive, from the set 0-9A-Z\-=[];',./\\`. Specify your
#: preference as a string of characters.
# visual_window_select_characters 1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ

#: Ask for confirmation when closing an OS window or a tab with at
#: least this number of kitty windows in it by window manager (e.g.
#: clicking the window close button or pressing the operating system
#: shortcut to close windows) or by the close_tab action. A value of
#: zero disables confirmation. This confirmation also applies to
#: requests to quit the entire application (all OS windows, via the
#: quit action). Negative values are converted to positive ones,
#: however, with shell_integration enabled, using negative values
#: means windows sitting at a shell prompt are not counted, only
#: windows where some command is currently running. You can also have
#: backgrounded jobs prevent closing, by adding count-background to
#: the setting, for example: -1 count-background. Note that if you
#: want confirmation when closing individual windows, you can map the
#: close_window_with_confirmation action.
confirm_os_window_close 0
