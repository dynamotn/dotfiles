# vim:expandtab:shiftwidth=8:tabstop=8:softtabstop=8:ft=gitconfig
[user]
        # Tôi ra đây có phải xưng danh không nhỉ?
        name = Trần Đức Nam
        email = me@dynamotn.dev
        # Signing SSH key
        signingkey = ~/.ssh/key/personal_ed25519.pub
[feature]
        # Optimize for repos with many files in the working directory
        manyFiles = true
[advice]
        # I don't like git advice
        skippedCherryPicks = false
        addEmptyPathspec = false
        detachedHead = false
        statusHints = false
[gpg]
        # Use SSH instead of GPG to sign
        format = ssh
[commit]
        # Always sign commit
        gpgsign = true
        # Use my template for commit message
        template = ~/.config/git/COMMITMSG
        cleanup = scissors
[tag]
        # Sort tags by version
        sort = version:refname
        # Always sign tag
        forceSignAnnotated = true
        gpgsign = true
{{- if lookPath "git" }}
{{- if gt (semver "2.35" | (output "bash" "-c" "git --version | cut -f3 -d' '" | trim | semver).Compare ) 0 }}
[merge]
        conflictstyle = zdiff3
{{- end}}
{{- end}}
[rerere]
        enabled = true
        autoupdate = true
[versionsort]
        suffix = ""
        suffix = "-rc"
        suffix = "-pre"
[diff]
        # Diff with vim
        tool = nvimdiff
        # Not show a/, b/ when diff, I'm angry with this
        noprefix = true
        # Use extended form of Bram Cohen's patience diff algorithm
        algorithm = histogram
        # Detect move blocks
        colorMoved = default
[mergetool]
        # Not prompt launch apps, I have no time to confirm that don't think why I used it
        prompt = false
        # Not generate .orig files
        keepBackup = false
[difftool]
        # Not prompt launch apps, I have no time to confirm that don't think why I used it
        prompt = false
[difftool "nvimdiff"]
        # Nvim diff 2 files
        cmd = "nvim -d $LOCAL $REMOTE"
[difftool "kitty"]
        # Use kitten of kitty/ to diff each hunk
        cmd = "kitty +kitten diff $LOCAL $REMOTE"
[mergetool "nvimdiff"]
        # Nvim diff 4 files
        cmd = "nvim -d $BASE $LOCAL $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'"
[help]
        # Okay sometimes I type so f*cking bad
        autocorrect = 1
[color]
        # Be careful with pipe when redirected output
        ui = auto
[color "status"]
        # I don't like default color
        added = green
        changed = blue
        untracked = magenta
        deleted = red
[color "diff"]
        # I don't like default color
        meta = cyan
        frag = magenta bold
        old = red
        new = blue
        commit = yellow bold
        whitespace = red reverse
[color "diff-highlight"]
        oldNormal = red bold
        oldHighLight = red bold 52
        newNormal = blue bold
        newHighLight = blue bold 45
[core]
        # Some Windows programmer in team, so no auto convert CRLF
        autocrlf = false
        # Work with standard or convention
        whitespace = trailing-space,space-before-tab,tab-in-indent,cr-at-eol
        # Use neovim to edit message
        editor = nvim
        # Custom global ignore file
        excludesfile = ~/.config/git/ignore
        # Custom global attributes file
        attributesfile = ~/.config/git/attributes
        # Use delta to prettier diff
        pager = delta --pager='ov -F'
[pager]
        # Use ov for pager
        show = delta --features ov-diff
        diff = delta --features ov-diff
        log = delta --features ov-log
[interactive]
        # Use delta to show diff when interactive each hunks
        diffFilter = delta --color-only
[delta]
        # Use delta with catppuccin theme
        syntax-theme = "catppuccin"
        # Change decorations
        features = decorations
        # Show navigate section
        navigate = true
        # Show line number & Two side
        side-by-side = true
        line-numbers = true
        # Style of whitespace error
        whitespace-error-style = red reverse
[delta "decorations"]
        commit-decoration-style = bold blue box ul
        file-style = bold blue ul
        file-decoration-style = green ul
        minus-style = syntax "#563f51"
        minus-emph-style = syntax "#895768"
        minus-empty-line-marker-style = syntax magenta
        plus-style = syntax "#455450"
        plus-emph-style = syntax "#658168"
        plus-empty-line-marker-style = syntax cyan
        hunk-header-decoration-style = box ul
        hunk-header-file-style = bold
        hunk-header-line-number-style = bold "#a5adcb"
        hunk-header-style = file line-number syntax
        line-numbers-left-style = "#6e738d"
        line-numbers-minus-style = bold "#ed8796"
        line-numbers-plus-style = bold "#a6da95"
        line-numbers-right-style = "#6e738d"
        line-numbers-zero-style = "#6e738d"
[delta "ov-diff"]
        pager = ov -F --section-delimiter '^(commit|added:|removed:|renamed:|Δ)' --section-header --pattern '•'
[delta "ov-log"]
        pager = ov -F --section-delimiter '^(commit|\\* commit|\\* \\w{7})' --section-header-num 1
[status]
        # Show summary of submodule
        submoduleSummary = true
[apply]
        # Auto fix white space
        whitespace = fix
[rebase]
        # More clear when rebase
        instructionFormat = "[%an - %ar] %s"
[stash]
        # Show stash with diff
        showPatch = true
[transfer]
        # Avoid paranoid
        fsckobjects = true
[fetch]
        # Prune remote-tracking branches that no longer exist on the remote
        prune = true
        pruneTags = true
[push]
        # Only push current branch to same name branch
        default = current
        # Push follow tags
        followTags = true
[submodule]
        # Fetch submodules parallel
        fetchJobs = 0
[alias]
        # Get main branch
        main = "!_() { git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'; }; _"
        # Graph log view
        graph = log --graph --abbrev-commit
        # Meaning stash
        snapshot = !git stash save "Snapshot: $(date)"
        # Rename stash
        stash-rename = "!_() { rev=$(git rev-parse $1) && git stash drop $1 || exit 1 ; git diff-index --quiet HEAD; s=$?; [ $s != 0 ] && git stash save \"tmp stash from stash-rename\"; git stash apply $rev && shift && git stash save \"$@\" && [ $s != 0 ] && git stash pop stash@{1}; }; _"
        # Find commits with source code
        find-source = "!_() { git log --pretty=format:'%C(yellow)%h %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; _"
        # Find commits with message
        find-message = "!_() { git log --pretty=format:'%C(yellow)%h %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; _"
        # Find branches containing commit
        find-branch = "!_() { git branch -a --contains $1; }; _"
        # Stop tracking a file that already in staged but keep in worktree
        stop-track = "!_() { git update-index --assume-unchanged $1; }; _"
        # Redo above
        track = "!_() { git update-index --no-assume-unchanged $1; }; _"
        # Keep independent version file forever
        keep-forever = "!_() { git update-index --skip-worktree $1; }; _"
        # Redo above
        stop-keep-forever = "!_() { git update-index --no-skip-worktree $1; }; _"
        # Show root level directory
        root = "!_() { git rev-parse --show-toplevel; }; _"
        # Show file with conflicts
        conflicts = "!_() { git ls-files -u | awk '{print $4}' | sort -u; }; _"
        # Delete dangling commits
        delete-dangling = "!_() { git reflog expire --expire=now --all; git gc --prune=now; }; _"
        # Delete merged branch
        delete-merged = "!_() { git branch --merged | grep -v $(git main) | grep -v develop | xargs git branch -d; }; _"
        # Submodule clean
        submodule-clean = "!_() { git submodule update --init --recursive && git submodule foreach --recursive 'git reset --hard' && git submodule foreach --recursive 'git clean -fd' }; _"
        # Update main branch
        update-main = !bash ~/.config/git/helper.sh update_main
        # Unshallow
        unshallow = "!_() { git fetch --unshallow; git config remote.$1.fetch "+refs/heads/*:refs/remotes/$1/*"; git fetch $1; }; _"
[gc]
        # Don't auto git gc, with large project can slow when working
        auto = 0
[init]
        defaultBranch = main
        templatedir = ~/.config/git/templates
[include]
        path = ~/.config/git/diff-filter
{{- range .decryptEnterprise }}
[includeIf "gitdir/i:~/Working/enterprise/{{ . }}/**"]
        # Include config file from enterprise {{ . }} projects
        path = ~/Working/enterprise/{{ . }}/.gitconfig
{{- end }}
{{- if .preferGitSSH }}
[url "git@github.com:"]
        # Prefer SSH than HTTPS for github
        insteadOf = https://github.com/
[url "git@gitlab.com:"]
        # Prefer SSH than HTTPS for gitlab
        insteadOf = https://gitlab.com/
{{- else }}
[url "https://github.com/"]
        # Prefer HTTPS than for github
        insteadOf = git@github.com:
[url "https://gitlab.com/"]
        # Prefer HTTPS than for gitlab
        insteadOf = git@gitlab.com:
{{- end }}
{{- if eq .kind "mobile" "tablet" }}
[safe]
        directory = /storage/emulated/0/Documents/Notes
{{- end }}
