minimumLimaVersion: 1.1.0

base:
  - template://_images/archlinux
  - template://_default/mounts

# containerd is managed by Docker, not by Lima, so the values are set to false here.
containerd:
  system: false
  user: false
{{- if eq .chezmoi.arch "arm64" }}
# rosetta to run Intel containers on Archlinux ARM64 VM on MacOS ARM64
vmType: "vz"
rosetta:
  enabled: true
  binfmt: true
{{- end }}

provision:
  - mode: system
    # This script defines the host.docker.internal hostname when hostResolver is disabled.
    # It is also needed for lima 0.8.2 and earlier, which does not support hostResolver.hosts.
    # Names defined in /etc/hosts inside the VM are not resolved inside containers when
    # using the hostResolver; use hostResolver.hosts instead (requires lima 0.8.3 or later).
    script: |
      #!/bin/sh
      sed -i 's/host.lima.internal.*/host.lima.internal host.docker.internal/' /etc/hosts
  - mode: system
    script: |
      #!/bin/bash
      set -eux -o pipefail
      command -v docker >/dev/null 2>&1 && exit 0
      if [ ! -e /etc/systemd/system/docker.socket.d/override.conf ]; then
        mkdir -p /etc/systemd/system/docker.socket.d
        # Alternatively we could just add the user to the "docker" group, but that requires restarting the user session
        cat <<-EOF >/etc/systemd/system/docker.socket.d/override.conf
        [Socket]
        SocketUser={{ "{{" }}.User{{ "}}" }}
      EOF
      fi
      pacman -Sy --noconfirm docker
      systemctl enable --now docker.socket
probes:
  - script: |
      #!/bin/bash
      set -eux -o pipefail
      if ! timeout 30s bash -c "until command -v docker >/dev/null 2>&1; do sleep 3; done"; then
        echo >&2 "docker is not installed yet"
        exit 1
      fi
      if ! timeout 30s bash -c "until pgrep dockerd; do sleep 3; done"; then
        echo >&2 "dockerd is not running"
        exit 1
      fi
    hint: See "/var/log/cloud-init-output.log" in the guest
hostResolver:
  # hostResolver.hosts requires lima 0.8.3 or later. Names defined here will also
  # resolve inside containers, and not just inside the VM itself.
  hosts:
    host.docker.internal: host.lima.internal
portForwards:
  - guestSocket: "/var/run/docker.sock"
    hostSocket: "{{ "{{" }}.Dir{{ "}}" }}/sock/docker.sock"
message: |
  To run `docker` on the host (assumes docker-cli is installed), run the following commands:
  ------
  docker context create lima-{{ "{{" }}.Name{{ "}}" }} --docker "host=unix://{{ "{{" }}.Dir{{ "}}" }}/sock/docker.sock"
  docker context use lima-{{ "{{" }}.Name{{ "}}" }}
  docker run hello-world
  ------
