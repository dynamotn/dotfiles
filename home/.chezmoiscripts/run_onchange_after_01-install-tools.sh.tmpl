#!{{ lookPath "bash" }}
set -Eeou pipefail
source {{ .chezmoi.sourceDir }}/../scripts/message.sh
source {{ .chezmoi.sourceDir }}/../scripts/os.sh
trap "_error \"Install tools failed\"" ERR

package_tools=()
binary_tools=()

{{- if (eq .chezmoi.os "linux") }}
{{- if (eq .chezmoi.osRelease.id "gentoo") }}
_gentoo_run() {
  for tool in "${package_tools[@]}"; do
    readarray packages < <(echo "$tool" | yq e -o=j -I=0 -r '.gentoo.packages.[]')
    for package in "${packages[@]}"; do
      package_name=$(echo "$package" | yq e '.name')
      if [[ "$package_name" == "null" ]]; then
        continue
      fi

      repo=$(echo "$package" | yq e '.repo')
      if [[ "$repo" != "null" ]]; then
        _gentoo_install "$package_name::$repo"
      else
        _gentoo_install "$package_name"
      fi
    fi
  done
}
{{- else if (eq .chezmoi.osRelease.id "arch") }}
_arch_run() {
  for tool in "${package_tools[@]}"; do
    readarray packages < <(echo "$tool" | yq e -o=j -I=0 -r '.arch.packages.[]')
    for package in "${packages[@]}"; do
      package_name=$(echo "$package" | yq e '.name')
      if [[ "$package_name" == "null" ]]; then
        continue
      fi

      _arch_install "$package_name"
    done
  done
}
{{- else if (eq .chezmoi.osRelease.id "debian" "ubuntu") }}
_ubuntu_run() {
  for tool in "${package_tools[@]}"; do
    readarray packages < <(echo "$tool" | yq e -o=j -I=0 -r '.ubuntu.packages.[]')
    for package in "${packages[@]}"; do
      package_name=$(echo "$package" | yq e '.name')
      if [[ "$package_name" == "null" ]]; then
        continue
      fi

      repo=$(echo "$package" | yq e '.repo')
      if [[ "$repo" != "null" ]]; then
        repo_name=$(echo "$package" | yq e '.repo_name')
        repo_version=$(echo "$package" | yq e '.repo_version')
        distro_version=$(echo "$package" | yq e '.distro_version')
        key=$(echo "$package" | yq e '.key')

        [[ "$repo_name" != "null" ]] && repo_name=$package
        [[ "$distro_version" != "null" ]] && distro_version=$(grep -is UBUNTU_CODENAME /etc/os-release | cut -d= -f2)
        if [ ! -f "/etc/apt/sources.list.d/$repo_name.list" ]; then
          echo "deb $repo $distro_version $repo_version" > /"etc/apt/sources.list.d/$repo_name.list"
          curl -sSL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x$key" | apt-key add -
        fi
        _ubuntu_repo_sync
      fi
      _ubuntu_install "$package_name"
    done
  done
}
{{- end }}
{{- else if eq .chezmoi.os "android" }}
{{- end }}
_termux_run() {
  for tool in "${package_tools[@]}"; do
    readarray packages < <(echo "$tool" | yq e -o=j -I=0 -r '.termux.packages.[]')
    for package in "${packages[@]}"; do
      package_name=$(echo "$package" | yq e '.name')
      if [[ "$package_name" == "null" ]]; then
        continue
      fi

      _termux_install "$package_name"
    done
  done
}

_install_package_tools() {
  _info "Install package tools"
  readarray package_tools < <(yq e -o=j -I=0 'filter(.method == "os") | .[]' ~/.config/dytoy/tools.yaml )

  {{- if (eq .chezmoi.os "linux") }}
  {{- if (eq .chezmoi.osRelease.id "gentoo") }}
  _info "Distro of this machine is Gentoo."
  _gentoo_run
  {{- else if (eq .chezmoi.osRelease.id "arch") }}
  _info "Distro of this machine is Arch Linux."
  _arch_init && _arch_run
  {{- else if (eq .chezmoi.osRelease.id "debian" "ubuntu") }}
  _info "Distro of this machine is Ubuntu."
  _ubuntu_init && _ubuntu_run
  {{- end }}
  {{- else if eq .chezmoi.os "android" }}
  _info "OS of this machine is Termux."
  _termux_init && _termux_run
  {{- end }}

  _success "Installed package tools"
}

_install_binary_tools() {
  bash {{ .chezmoi.homeDir  }}/.config/dytoy/binary.sh -e -n
}

_main() {
  _install_package_tools
  _install_binary_tools
}

export PATH=$PATH:~/.local/bin

_notice "Install tools"
_info $PATH
{{- range (joinPath .chezmoi.sourceDir ".chezmoitemplates/dytoy/tools/*" | glob) }}
# {{ . }} hash: {{ . | include | sha256sum }}
{{- end }}
_main
_success "Installed tools"
